diff --git a/js/Controls.js b/js/Controls.js
index e33703f..f951c0c 100644
--- a/js/Controls.js
+++ b/js/Controls.js
@@ -47,6 +47,12 @@ function Controls (object, options) {
 			console.log (object.name + " touched " + other_object.name + " from above");
 			airborne = false;
 		}
+		if (other_object.name == "trap") {
+			object.material.color.setHex(0x00ff00);
+		}
+		else {
+			object.material.color.setHex(object.defaultColor);
+		}
 	});
 }
 
diff --git a/js/HotScape.js b/js/HotScape.js
index ae81b75..2d244b5 100644
--- a/js/HotScape.js
+++ b/js/HotScape.js
@@ -3,7 +3,7 @@ Physijs.scripts.ammo = 'ammo.js';
 
 var renderer, scene, camera, relativeCameraOffset;
 var pSun, cSun;
-var clock, player, controls;
+var clock, player, controls, traps;
 var ground, obstacle;
 
 var physicsWorld, collisionConfiguration, dispatcher, solver, broadphase;
@@ -68,6 +68,10 @@ function setupWorld() {
 	pos.set (0, 6, 0);
 	quat = new THREE.Quaternion();
 	obstacle = createBox (1, 1, 1, 5, pos, quat, new THREE.MeshLambertMaterial ({color: 0x0000ff}), "a blue box");
+	//traps
+	traps = new Array();
+	pos.set(3,6,3);
+	createTrap(pos, "spikes");
 }
 
 function setupPlayer() {
@@ -77,8 +81,8 @@ function setupPlayer() {
 	player.position.y = 10;
 	player.name = "Player"; // TODO: name
 	scene.add (player);
-	//freeze player rotation on X and Z
-	player.setAngularFactor (new THREE.Vector3 (0, 1, 0));
+	//freeze player rotation on X, Y and Z
+	player.setAngularFactor (new THREE.Vector3 (0, 0, 0));
 	//player.setLinearFactor (new THREE.Vector3 (1, 0, 1));
 	changePOV (4);
 
@@ -86,6 +90,26 @@ function setupPlayer() {
 	controls.moveSpeed = 2;
 }
 
+function createTrap(pos, name) {
+	var trap;
+	switch (name) {
+		case "spikes": 
+			trap = new Trap(new THREE.BoxGeometry(2,2,2), new THREE.MeshLambertMaterial ({color: 0x880055, lights: true, wireframe: false, fog: false}), pos);
+			trap.name = "trap";
+			traps.push(trap);
+			scene.add(traps[traps.length-1]);
+		break;
+		case "saw":
+			trap = new Trap(new THREE.BoxGeometry(2,2,2), new THREE.MeshLambertMaterial ({color: 0x223355, lights: true, wireframe: false, fog: false}), pos);
+			trap.name = "trap";
+			traps.push(trap);
+			scene.add(traps[traps.length-1]);
+		default:
+			console.log("wrong name");
+	}
+
+}
+
 function createBox (sx, sy, sz, mass, pos, quat, material, name) {
 	var box = new Physijs.BoxMesh (new THREE.BoxGeometry (sx, sy, sz, 1, 1, 1), material, mass);
 	box.position.copy (pos);
@@ -94,6 +118,7 @@ function createBox (sx, sy, sz, mass, pos, quat, material, name) {
 	box.receiveShadow = true;
 	box.castShadow = true;
 
+
 	scene.add (box);
 	return box;
 }
diff --git a/js/Player.js b/js/Player.js
index cef55ea..ca93f6a 100644
--- a/js/Player.js
+++ b/js/Player.js
@@ -14,6 +14,11 @@ function Player (geom, mat, pos) {
 	Physijs.BoxMesh.call (this, this.geometry, this.material, 71);
 	if (typeof pos !== 'undefined')
 		this.position = pos;
+<<<<<<< Updated upstream
+=======
+	this.position.y = 20;
+	this.defaultColor = 0x223355;
+>>>>>>> Stashed changes
 }
 
 Player.prototype = Object.create (Physijs.BoxMesh.prototype);
diff --git a/js/Trap.js b/js/Trap.js
index 9d9860e..cd79ab5 100644
--- a/js/Trap.js
+++ b/js/Trap.js
@@ -1,4 +1,5 @@
 function Trap (geom, mat, pos) {
+<<<<<<< Updated upstream
 	this.geometry = new THREE.BoxGeometry (1, 1, 1);
 	this.material = new THREE.MeshLambertMaterial ({
 		color: 0x223355,
@@ -6,16 +7,28 @@ function Trap (geom, mat, pos) {
 		fog: true
 	});
 	this.position = new THREE.Vector3();
+=======
+	// public properties
+>>>>>>> Stashed changes
 
 	if (typeof geom !== 'undefined')
 		this.geometry = geom;
 	if (typeof mat !== 'undefined')
 		this.material = mat;
+
+	Physijs.BoxMesh.call (this, this.geometry, this.material, 0);
+	this._physijs.collision_flags = 4;
+
+	console.log('old pos: ' + pos.x + " " + pos.y + " " + pos.z);
 	if (typeof pos !== 'undefined')
 		this.position = pos;
 
-	THREE.Mesh.call (this, this.geometry, this.material);
+	this.position.x = pos.x;
+	this.position.y = pos.y;
+	this.position.z = pos.z;
+	console.log(this.position);
+
 }
 
-Trap.prototype = Object.create (THREE.Mesh.prototype);
+Trap.prototype = Object.create (Physijs.BoxMesh.prototype);
 Trap.prototype.constructor = Trap;
